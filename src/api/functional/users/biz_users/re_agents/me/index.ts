/**
 * @packageDocumentation
 * @module api.functional.users.biz_users.re_agents.me
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { IREAgent } from "./../../../../../structures/user/IREAgent";

export * as portfolios from "./portfolios";
export * as real_estate from "./real_estate";
export * as expertise from "./expertise";

/**
 * 공인중개사 개인정보를 요청한다.
 * 
 * 이메일, 휴대전화 등의 개인 정보는 마킹처리되어 전달된다.
 * 
 * {@link IREAgent.FailureCode.GetPrivate 에러 코드}
 * 
 * @summary 공인중개사 내 정보 조회
 * @tag re-agents
 * @return 공인중개사 상세 정보
 * 
 * @controller UsersREAgentsMeController.get()
 * @path GET /users/biz-users/re-agents/me
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
    connection: IConnection,
): Promise<get.Output> {
    return !!connection.simulate
        ? get.simulate(
              connection,
          )
        : Fetcher.fetch(
              connection,
              get.ENCRYPTED,
              get.METHOD,
              get.path(),
          );
}
export namespace get {
    export type Output = IREAgent;

    export const METHOD = "GET" as const;
    export const PATH: string = "/users/biz-users/re-agents/me";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/users/biz-users/re-agents/me`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
    ): Promise<Output> => {
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}