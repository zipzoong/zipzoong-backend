/**
 * @packageDocumentation
 * @module api.functional.users.biz_users.me.introduction
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import { NestiaSimulator } from "./../../../../../utils/NestiaSimulator";
import type { IBIZUser } from "./../../../../../structures/user/IBIZUser";

/**
 * 사업자 자기소개 수정
 * 
 * @summary 사업자 자기소개 수정
 * 
 * @tag re-agents
 * 
 * @tag hs-providers
 * 
 * @param access_token Authorization access access_token
 * 
 * @param body 자기 소개 정보
 * 
 * @controller UsersBIZUsersIntroductionUpdateController.update()
 * @path PUT /users/biz-users/me/introduction
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
    connection: IConnection,
    body: IBIZUser.IUpdate.IIntroduction,
): Promise<void> {
    return !!connection.simulate
        ? update.simulate(
              connection,
              body,
          )
        : Fetcher.fetch(
              connection,
              update.ENCRYPTED,
              update.METHOD,
              update.path(),
              body,
              update.stringify,
          );
}
export namespace update {
    export type Input = IBIZUser.IUpdate.IIntroduction;

    export const METHOD = "PUT" as const;
    export const PATH: string = "/users/biz-users/me/introduction";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/users/biz-users/me/introduction`;
    }
    export const simulate = async (
        connection: IConnection,
        body: update.Input,
    ): Promise<void> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path()
        });
        assert.body(() => typia.assert(body));
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}