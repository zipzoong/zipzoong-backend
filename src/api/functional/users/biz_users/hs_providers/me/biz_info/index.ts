/**
 * @packageDocumentation
 * @module api.functional.users.biz_users.hs_providers.me.biz_info
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import { NestiaSimulator } from "./../../../../../../utils/NestiaSimulator";
import type { IHSProvider } from "./../../../../../../structures/user/IHSProvider";

/**
 * 생활서비스 전문가 사업자 정보 수정
 * 
 * - 사업자 정보가 변경될 경우, 필요시 증명 서류를 추가로 저장해야 한다.
 * 
 * @summary 생활서비스 전문가 사업자 정보 수정
 * @tag hs-providers
 * @param body 사업자 정보
 * 
 * @controller UsersHSProvidersBIZInfoUpdateController.update()
 * @path PUT /users/biz-users/hs-providers/me/biz-info
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
    connection: IConnection,
    body: IHSProvider.IUpdate.IBIZInfo,
): Promise<void> {
    return !!connection.simulate
        ? update.simulate(
              connection,
              body,
          )
        : Fetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              update.ENCRYPTED,
              update.METHOD,
              update.path(),
              body,
              update.stringify,
          );
}
export namespace update {
    export type Input = IHSProvider.IUpdate.IBIZInfo;

    export const METHOD = "PUT" as const;
    export const PATH: string = "/users/biz-users/hs-providers/me/biz-info";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/users/biz-users/hs-providers/me/biz-info`;
    }
    export const simulate = async (
        connection: IConnection,
        body: update.Input,
    ): Promise<void> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path()
        });
        assert.body(() => typia.assert(body));
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}