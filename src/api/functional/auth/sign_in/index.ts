/**
 * @packageDocumentation
 * @module api.functional.auth.sign_in
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import { NestiaSimulator } from "./../../../utils/NestiaSimulator";
import type { IAuthentication } from "./../../../structures/IAuthentication";

/**
 * 전달된 정보에 대응하는 특정 회원에 대한 권한이 부여된 인증 토큰을 발급한다.
 * 
 * {@link IAuthentication.FailureCode.SignIn 에러 코드 타입}
 * - `OAUTH_FAIL` : oauth 인증에 실패한 경우
 * - `ACCOUNT_NOT_FOUND` : 집중 서버에 계정 정보가 없는 경우
 * - `ACCOUNT_INACTIVE` : 비활성화된 계정인 경우
 * - `USER_NOT_FOUND` : 사용자 정보가 없는 경우
 * 
 * @summary 로그인
 * 
 * @tag authentication
 * 
 * @param body oauth code, oauth type, user type
 * 
 * @return 사용자 권한이 부여된 토큰
 * 
 * @controller AuthController.execute()
 * @path POST /auth/sign-in
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function execute(
    connection: IConnection,
    body: IAuthentication.ISignIn,
): Promise<execute.Output> {
    return !!connection.simulate
        ? execute.simulate(
              connection,
              body,
          )
        : Fetcher.fetch(
              connection,
              execute.ENCRYPTED,
              execute.METHOD,
              execute.path(),
              body,
              execute.stringify,
          );
}
export namespace execute {
    export type Input = IAuthentication.ISignIn;
    export type Output = IAuthentication.IResponse.ISignIn;

    export const METHOD = "POST" as const;
    export const PATH: string = "/auth/sign-in";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
        status: 200,
    };

    export const path = (): string => {
        return `/auth/sign-in`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
        body: execute.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path()
        });
        assert.body(() => typia.assert(body));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}