/**
 * @packageDocumentation
 * @module api.functional.auth.user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import { NestiaSimulator } from "./../../../utils/NestiaSimulator";
import type { IUser } from "./../../../structures/user/IUser";
import type { IAuthentication } from "./../../../structures/IAuthentication";

/**
 * 계정 토큰을 사용하여 사용자 정보를 생성한다.
 * 
 * 이메일, 휴대전화는 verification_id를 null로 하면 계정 프로필에 저장된 정보가 기본으로 적용된다.
 * 
 * 그 외 정보는 null을 전송할 경우, null을 저장한다.
 * 
 * @summary 사용자 정보 생성
 * 
 * @tag authentication
 * 
 * @tag users
 * 
 * @return 사용자 토큰(access token)
 * 
 * @controller AUthUserController.create()
 * @path POST /auth/user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
    connection: IConnection,
    body: IUser.ICreateRequest,
): Promise<create.Output> {
    return !!connection.simulate
        ? create.simulate(
              connection,
              body,
          )
        : Fetcher.fetch(
              connection,
              create.ENCRYPTED,
              create.METHOD,
              create.path(),
              body,
              create.stringify,
          );
}
export namespace create {
    export type Input = IUser.ICreateRequest;
    export type Output = IAuthentication.IResponse.ISignIn;

    export const METHOD = "POST" as const;
    export const PATH: string = "/auth/user";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/auth/user`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
        body: create.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path()
        });
        assert.body(() => typia.assert(body));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}