/**
 * @packageDocumentation
 * @module api.functional.auth.user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import { NestiaSimulator } from "./../../../utils/NestiaSimulator";
import type { IUser } from "./../../../structures/user/IUser";
import type { IAuthentication } from "./../../../structures/IAuthentication";

/**
 * 계정 토큰을 사용하여 사용자 정보를 생성한다.
 * 
 * 이메일, 휴대전화는 verification_id를 null로 하면 계정 프로필에 저장된 정보가 기본으로 적용된다.
 * 
 * 그 외 정보는 null을 전송할 경우, null을 저장한다.
 * 
 * {@link IAuthentication.FailureCode.CreateUser 에러 코드}
 * - `TOKEN_EXPIRED` : 계정 토큰이 만료된 경우
 * - `TOKEN_INVALID` : 계정 토큰이 유효하지 않은 경우
 * - `ACCOUNT_NOT_FOUND` : 집중 서버에 계정 정보가 없는 경우
 * - `ACCOUNT_INACTIVE` : 비활성화된 계정인 경우
 * - `USER_ALREADY_EXIST` : 이미 연동된 해당 유형의 사용자 정보가 있는 경우
 * - `EXPERTISE_INVALID` : 공인중개사 전문분야 정보가 유효하지 않은 경우
 * - `EXPERTISE_REQUIRED` : 유효한 생활서비스 전문가 전문분야가 없을 때
 * - `SUPER_EXPERTISE_MISMATCH` : 선택된 생활서비스 전문가 전문분야의 상위 전문분야가 일치하지 않을 때
 * - `TERMS_INSUFFICIENT` : 필수 약관 동의가 불충분한 경우
 * - `TERMS_INVALID` : 약관 정보가 유효하지 않은 경우
 * - `VERIFICATION_INVALID` : 인증 정보가 잘못된 경우
 * - `VERIFICATION_NOT_FOUND` : 인증 정보가 존재하지 않는 경우
 * - `VERIFICATION_UNCOMPLETED` : 인증이 완료되지 않은 정보인 경우
 * 
 * @summary 사용자 정보 생성
 * @tag authentication
 * @security account
 * @param body 사용자 정보
 * @return 사용자 토큰(access token)
 * 
 * @controller AUthUserController.create()
 * @path POST /auth/user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
    connection: IConnection,
    body: IUser.ICreateRequest,
): Promise<create.Output> {
    return !!connection.simulate
        ? create.simulate(
              connection,
              body,
          )
        : Fetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              create.ENCRYPTED,
              create.METHOD,
              create.path(),
              body,
              create.stringify,
          );
}
export namespace create {
    export type Input = IUser.ICreateRequest;
    export type Output = IAuthentication.IResponse.ISignIn;

    export const METHOD = "POST" as const;
    export const PATH: string = "/auth/user";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/auth/user`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
        body: create.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path()
        });
        assert.body(() => typia.assert(body));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}