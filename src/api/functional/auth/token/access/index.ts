/**
 * @packageDocumentation
 * @module api.functional.auth.token.access
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import type { IAuthentication } from "./../../../../structures/IAuthentication";

/**
 * 액세스 토큰 재발급 요청
 * 
 * @summary 액세스 토큰 재발급
 * 
 * @tag authentication
 * 
 * @param refresh_token 액세스 토큰 재발급 토큰
 * 
 * @return 액세스 토큰
 * 
 * @controller AuthAccessTokenController.create()
 * @path POST /auth/token/access
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
    connection: IConnection,
): Promise<create.Output> {
    return !!connection.simulate
        ? create.simulate(
              connection,
          )
        : Fetcher.fetch(
              connection,
              create.ENCRYPTED,
              create.METHOD,
              create.path(),
          );
}
export namespace create {
    export type Output = IAuthentication.IResponse.IRefresh;

    export const METHOD = "POST" as const;
    export const PATH: string = "/auth/token/access";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/auth/token/access`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
    ): Promise<Output> => {
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}