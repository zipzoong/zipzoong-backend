/**
 * @packageDocumentation
 * @module api.functional.auth.sign_up
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import { NestiaSimulator } from "./../../../utils/NestiaSimulator";
import type { IAuthentication } from "./../../../structures/IAuthentication";

/**
 * 회원을 생성하거나 계정 프로필 정보 요청을 위한 인증 토큰을 발급한다.
 * 
 * account에 포함된 정보는 회원 정보에 기본값으로 사용할 수 있다.
 * 
 * 에러 코드
 * - OAUTH_FAIL : oauth 인증에 실패한 경우
 * - ACCOUNT_INACTIVE : 비활성화된 계정인 경우
 * 
 * @summary 계정 생성(회원가입)
 * 
 * @tag authentication
 * 
 * @param body oauth code, oauth type
 * 
 * @return 계정 권한이 부여된 토큰
 * 
 * @controller AuthController.create()
 * @path POST /auth/sign-up
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
    connection: IConnection,
    body: IAuthentication.ISignUp,
): Promise<create.Output> {
    return !!connection.simulate
        ? create.simulate(
              connection,
              body,
          )
        : Fetcher.fetch(
              connection,
              create.ENCRYPTED,
              create.METHOD,
              create.path(),
              body,
              create.stringify,
          );
}
export namespace create {
    export type Input = IAuthentication.ISignUp;
    export type Output = IAuthentication.IResponse.ISignUp;

    export const METHOD = "POST" as const;
    export const PATH: string = "/auth/sign-up";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/auth/sign-up`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
        body: create.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path()
        });
        assert.body(() => typia.assert(body));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}