/**
 * @packageDocumentation
 * @module api.functional.verification.phones.verify
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import { NestiaSimulator } from "./../../../../utils/NestiaSimulator";
import type { IVerification } from "./../../../../structures/IVerification";

/**
 * 생성된 인증 정보에 대해 인증을 진행하는 요청이다.
 * 
 * {@link IVerification.FailureCode.VerifyPhone 에러 코드}
 * - `VERIFICATION_NOT_FOUND` : 인증 정보가 존재하지 않는 경우
 * - `VERIFICATION_EXPIRED` : 인증이 만료된 경우
 * 
 * @summary 휴대전화 인증
 * 
 * @tag verification
 * 
 * @param body 인증 코드와 휴대전화
 * 
 * @return 인증 정보 id
 * 
 * @controller VerificationPhonesVerifyController.execute()
 * @path POST /verification/phones/verify
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function execute(
    connection: IConnection,
    body: IVerification.IRequest.IVerifyPhone,
): Promise<execute.Output> {
    return !!connection.simulate
        ? execute.simulate(
              connection,
              body,
          )
        : Fetcher.fetch(
              connection,
              execute.ENCRYPTED,
              execute.METHOD,
              execute.path(),
              body,
              execute.stringify,
          );
}
export namespace execute {
    export type Input = IVerification.IRequest.IVerifyPhone;
    export type Output = IVerification.IResponse.IVerify;

    export const METHOD = "POST" as const;
    export const PATH: string = "/verification/phones/verify";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
        status: 200,
    };

    export const path = (): string => {
        return `/verification/phones/verify`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
        body: execute.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path()
        });
        assert.body(() => typia.assert(body));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}