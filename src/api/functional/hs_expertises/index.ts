/**
 * @packageDocumentation
 * @module api.functional.hs_expertises
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import { NestiaSimulator } from "./../../utils/NestiaSimulator";
import type { IExpertise } from "./../../structures/IExpertise";

/**
 * 생활서비스 상위 전문 분야 목록 불러오기
 * 
 * @summary 생활서비스 상위 전문 분야 목록 조회
 * 
 * @tag hs-providers
 * 
 * @return 생활서비스 상위 전문 분야 전체 목록
 * 
 * @controller HSExpertisesController.getList()
 * @path GET /hs-expertises
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getList(
    connection: IConnection,
): Promise<getList.Output> {
    return !!connection.simulate
        ? getList.simulate(
              connection,
          )
        : Fetcher.fetch(
              connection,
              getList.ENCRYPTED,
              getList.METHOD,
              getList.path(),
          );
}
export namespace getList {
    export type Output = Array<IExpertise.ISuper>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/hs-expertises";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/hs-expertises`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
    ): Promise<Output> => {
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * 생활서비스 상위 전문 분야 조회
 * 
 * @summary 생활서비스 상위 전문 분야 조회
 * 
 * @tag hs-providers
 * 
 * @param expertise_id 상위 전문분야 id
 * 
 * @return 생활서비스 상위 전문 분야
 * 
 * @controller HSExpertisesController.get()
 * @path GET /hs-expertises/:expertise_id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
    connection: IConnection,
    expertise_id: string,
): Promise<get.Output> {
    return !!connection.simulate
        ? get.simulate(
              connection,
              expertise_id,
          )
        : Fetcher.fetch(
              connection,
              get.ENCRYPTED,
              get.METHOD,
              get.path(expertise_id),
          );
}
export namespace get {
    export type Output = IExpertise.ISuper;

    export const METHOD = "GET" as const;
    export const PATH: string = "/hs-expertises/:expertise_id";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (expertise_id: string): string => {
        return `/hs-expertises/${encodeURIComponent(expertise_id ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
        expertise_id: string,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path(expertise_id)
        });
        assert.param("expertise_id")("string")(() => typia.assert(expertise_id));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}