/**
 * @packageDocumentation
 * @module api.functional.upload
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

import { NestiaSimulator } from "./../../utils/NestiaSimulator";
import type { IUpload } from "./../../structures/IUpload";

/**
 * 리소를 업로드하기 위한 presigned url과 접근에 필요한 정보를 얻을 수 있다.
 * 
 * presigned url의 사용법은 aws s3 presigned url을 확인할 것
 * 
 * @summary 리소스 업로드용 presigned url 요청
 * 
 * @tag resources
 * 
 * @param body 리소스 유형 정보를 입력한다.
 * 
 * @return 리소스 업로드 정보
 * 
 * @controller UploadController.getUrl()
 * @path POST /upload
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getUrl(
    connection: IConnection,
    body: IUpload.IBody,
): Promise<getUrl.Output> {
    return !!connection.simulate
        ? getUrl.simulate(
              connection,
              body,
          )
        : Fetcher.fetch(
              connection,
              getUrl.ENCRYPTED,
              getUrl.METHOD,
              getUrl.path(),
              body,
              getUrl.stringify,
          );
}
export namespace getUrl {
    export type Input = IUpload.IBody;
    export type Output = IUpload;

    export const METHOD = "POST" as const;
    export const PATH: string = "/upload";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/upload`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
        body: getUrl.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path()
        });
        assert.body(() => typia.assert(body));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
    export const stringify = (input: Input) => typia.assertStringify(input);
}