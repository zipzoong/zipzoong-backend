/**
 * @packageDocumentation
 * @module api.functional.zipzoong_cares
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

export * as request from "./request";
export * as requests from "./requests";

/**
 * 집중 케어 목록 불러오기 (임시)
 * 
 * 응답받은 url list는 각각 json 데이터를 응답받을 수 있다.
 * 
 * 사업자만 요청할 수 있다.
 * 
 * {@link IZipzoongCare.FailureCode.GetList 에러 코드}
 * 
 * @summary 집중 케어 목록 불러오기
 * @tag re-agents
 * @tag hs-providers
 * @return 집중 케어 정보를 불러오기 위한 url list
 * 
 * @controller ZipzoongCaresController.getList()
 * @path GET /zipzoong-cares
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getList(
    connection: IConnection,
): Promise<getList.Output> {
    return !!connection.simulate
        ? getList.simulate(
              connection,
          )
        : Fetcher.fetch(
              connection,
              getList.ENCRYPTED,
              getList.METHOD,
              getList.path(),
          );
}
export namespace getList {
    export type Output = Array<string>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/zipzoong-cares";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/zipzoong-cares`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
    ): Promise<Output> => {
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}