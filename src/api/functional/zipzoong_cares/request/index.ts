/**
 * @packageDocumentation
 * @module api.functional.zipzoong_cares.request
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";
import typia from "typia";

/**
 * 집중 케어 신청 API (임시)
 * 
 * 휴대폰 인증을 완료한 일반 고객만 요청할 수 있다.
 * 
 * 응답받은 presigned url을 통해 json 데이터를 업로드해야 한다.
 * 
 * {@link IZipzoongCare.FailureCode.Request 에러 코드}
 * 
 * @summary 집중 케어 신청
 * @tag clients
 * @return presigned url - 집중 케어 요청 json 데이터를 업로드하기 위한 s3 presigned url
 * 
 * @controller ZipzoongCaresController.execute()
 * @path PUT /zipzoong-cares/request
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function execute(
    connection: IConnection,
): Promise<execute.Output> {
    return !!connection.simulate
        ? execute.simulate(
              connection,
          )
        : Fetcher.fetch(
              connection,
              execute.ENCRYPTED,
              execute.METHOD,
              execute.path(),
          );
}
export namespace execute {
    export type Output = string;

    export const METHOD = "PUT" as const;
    export const PATH: string = "/zipzoong-cares/request";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/zipzoong-cares/request`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
    ): Promise<Output> => {
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}